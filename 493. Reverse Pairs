class Solution {
    public int reversePairs(int[] nums) {
        return mergeCount(nums,0,nums.length-1);
    }
    static int mergeCount(int[] nums,int lo,int hi){
        if(lo>=hi) return 0;
        int mid=(lo+hi)/2;
        int count=mergeCount(nums,lo,mid);
        count+=mergeCount(nums,mid+1,hi);
        count+=merge(nums,lo,mid,hi);
        return count;
    }
    static int merge(int[] nums,int lo,int mid,int hi){
        int count=0,j=mid+1;
        for(int i=lo;i<=mid;i++){
            while(j<=hi && nums[i]>(2*(long) nums[j])){
                j++;
            }
            count+=(j-(mid+1));
        }
        ArrayList<Integer>temp=new ArrayList<Integer>();
        int left=lo,right=mid+1;
        while(left<=mid && right<=hi){
            if(nums[left]<=nums[right]){
                temp.add(nums[left++]);
            }
            else{
                temp.add(nums[right++]);
            }
        }
        while(left<=mid){
            temp.add(nums[left++]);
        }
        while(right<=hi){
            temp.add(nums[right++]);
        }
        for(int i=lo;i<=hi;i++){
            nums[i]=temp.get(i-lo);
        }
        return count;
    }
}
